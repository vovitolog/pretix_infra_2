---
- name: Ensure Docker network exists
  community.docker.docker_network:
    name: "{{ alloy_docker_network }}"
    driver: bridge
    attachable: true
    state: present

- name: Ensure Alloy volume exists
  community.docker.docker_volume:
    name: "{{ alloy_volume }}"
    driver: local
    labels:
      app: alloy
      service: alloy
    state: present

- name: Ensure Alloy config directory exists
  ansible.builtin.file:
    path: "{{ alloy_etc }}"
    state: directory
    mode: "0755"
  when: alloy_config_deploy

- name: Deploy Alloy configuration file from template
  template:
    src: config.alloy.j2
    dest: "{{ alloy_etc }}/config.alloy"
    mode: '0644'
  when: alloy_config_deploy
  notify: Restart Alloy

- name: Run Alloy container
  docker_container:
    name: alloy
    image: "grafana/alloy:{{ alloy_version }}"
    ports:
      - "{{ alloy_http_port }}:12345"
    volumes:
      - "{{ alloy_volume }}:/var/lib/alloy/data"
      - "{{ alloy_etc }}/config.alloy:/etc/alloy/config.alloy:ro"
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - name: "{{ alloy_docker_network }}"
    hostname: "{{ ansible_hostname }}"
    restart_policy: "{{ alloy_container_restart_policy }}"
    user: "{{ alloy_container_uid }}"
    groups: "{{ alloy_container_groups }}"
    labels:
      app: alloy
      monitoring: "true"
    state: started
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "-q", "http://localhost:12345/-/ready"]
    #   interval: "30s"
    #   timeout: "10s"
    #   retries: 3
    #   start_period: "30s"

- name: Ensure Alloy is running
  docker_container_info:
    name: alloy
  register: alloy_container_info

- name: Display Alloy container status
  debug:
    var: alloy_container_info.container.State.Status
